<?php

namespace NTI\SyncBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\NonUniqueResultException;
use NTI\SyncBundle\Entity\SyncFailedItemState;

/**
 * SyncFailedItemStateRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SyncFailedItemStateRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, SyncFailedItemState::class);
    }

    public function findFromTimestampAndMapping($mappingName, $timestamp)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->innerJoin('s.mapping', 'm')
            ->andWhere('m.name = :mappingName')
            ->setParameter('mappingName', $mappingName)
            ->andWhere('s.timestamp >= :timestamp')
            ->setParameter('timestamp', $timestamp)
            ->orderBy('s.timestamp', 'asc')
        ;

        return $qb->getQuery()->getResult();
    }

    public function findByUuId($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('item')
            ->from('NTISyncBundle:SyncFailedItemState', 'item')
            ->andWhere(
                $qb->expr()->eq('item.uuid', $qb->expr()->literal($id))
            )
        ;

        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }
}
